trigger:
  - '*'
  
pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'
  dockerRegistryServiceConnection: 'DockerHub'
  imageRepository: 'edissonpena/nexos'
  dockerfilePath: '$(Build.SourcesDirectory)/Tailspin.SpaceGame.Web/Dockerfile'
  tag: '$(Build.BuildId)'

steps:

- checkout: self
  fetchDepth: 0

- task: UseDotNet@2
  displayName: 'Use .NET SDK 6.x'
  inputs:
    packageType: sdk
    version: '6.x'

- task: DotNetCoreCLI@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: SonarCloudPrepare@1
  inputs:
    sonarCloud: 'SonarCloud'
    organization: 'edissonpena'
    scannerMode: 'MSBuild'
    projectKey: 'EdissonPena_Nexos'

- task: DotNetCoreCLI@2
  displayName: 'Build the project - Release'
  inputs:
    command: 'build'
    arguments: '--no-restore --configuration Release'
    projects: '**/*.csproj'

- task: SonarCloudAnalyze@1

- task: SonarCloudPublish@1
  displayName: 'Code Analysis - Publish QG'
  inputs:
    pollingTimeoutSec: '300'

- task: DotNetCoreCLI@2
  displayName: 'Run unit tests - $(buildConfiguration)'
  inputs:
    command: 'test'
    arguments: '--no-build --configuration $(buildConfiguration)'
    publishTestResults: true
    projects: '**/*.Tests.csproj'

- task: Docker@2
  displayName: Build and push an image to container registry
  inputs:
    command: buildAndPush
    repository: $(imageRepository)
    dockerfile: $(dockerfilePath)
    containerRegistry: $(dockerRegistryServiceConnection)
    tags: |
      latest
      $(tag)

- bash: docker run -d -p 80:80 edissonpena/nexos:latest
  displayName: 'App Container'

- task: owaspzap@1
  inputs:
    aggressivemode: true
    threshold: '50'
    port: '80'
  displayName: 'Owasp Scan'

- bash: |
    sudo npm install -g handlebars-cmd
    sudo cat <<EOF > owaspzap/nunit-template.hbs
    {{#each site}}
    <test-run
        id="2"
        name="Owasp test"
        start-time="{{../[@generated]}}"  >
        <test-suite
            id="{{@index}}"
            type="Assembly"
            name="{{[@name]}}"
            result="Failed"
            failed="{{alerts.length}}">
            <attachments>
                <attachment>
                    <filePath>owaspzap/report.html</filePath>
                </attachment>
            </attachments>
        {{#each alerts}}<test-case
            id="{{@index}}"
            name="{{alert}}"
            result="Failed"
            fullname="{{alert}}"
            time="1">
                <failure>
                        <message>
                        <![CDATA[{{{desc}}}]]>
                    </message>
                    <stack-trace>
                        <![CDATA[
    Solution:
    {{{solution}}}
    Reference:
    {{{reference}}}
    instances:{{#each instances}}
    * {{uri}}
        - {{method}}
        {{#if evidence}}- {{{evidence}}}{{/if}}
                        {{/each}}]]>
                    </stack-trace>
                </failure>
        </test-case>
        {{/each}}
        </test-suite>
    </test-run>
    {{/each}}
    EOF
  displayName: 'Owasp Nunit Template'

- bash: 'handlebars owaspzap/report.json < owaspzap/nunit-template.hbs > owaspzap/test-results.xml'
  displayName: 'Generate Nunit type file'


- task: PublishTestResults@2
  displayName: 'Publish OWASP Test Results'
  inputs:
    testResultsFormat: 'NUnit'
    testResultsFiles: 'test-results.xml'

- task: AzureWebAppContainer@1
  displayName: 'Deploy the container'
  inputs:
    azureSubscription: 'NexosTest'
    appName: 'nexostest'
    imageName: 'edissonpena/nexos:latest'

- script: |
    wget -c https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.3.tgz
    tar -xf apache-jmeter-5.6.3.tgz
  displayName: 'Install JMeter'

- script: |
        apache-jmeter-5.6.3/bin/./jmeter -Jjmeter.reportgenerator.overall_granularity=1000 -n -t LoadTest.jmx -l results/results.jtl -j results/output.log -e -o report
  displayName: 'Run JMeter'

- script: |
    JMETER_RESULTS=results/results.jtl
    JUNIT_RESULTS=output.xml
    python3 jtl_junit_converter.py $JMETER_RESULTS $JUNIT_RESULTS
  displayName: 'Transform JMeter Results to JUnit Format'

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: 'output.xml'
    failTaskOnFailedTests: true
  displayName: 'Publish Load Testing Results'

- publish: $(System.DefaultWorkingDirectory)/results
  artifact: jmeter-results
  condition: succeededOrFailed()
  displayName: 'Publish Load Test Artifacts'

- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifact HTML Report'
  inputs:
    targetPath: report
    artifact: jmeter-report

- task: publishhtmlreport@1
  displayName: 'Publish Pipeline HTML Report'
  inputs:
    htmlType: 'Jmeter'
    JmeterReportsPath: '$(Build.SourcesDirectory)/report'